Given the following collection:
> db.fun.find()
{ "_id" : 0, "a" : 0, "b" : 0, "c" : 21 }
{ "_id" : 1, "a" : 0, "b" : 0, "c" : 54 }
{ "_id" : 2, "a" : 0, "b" : 1, "c" : 52 }
{ "_id" : 3, "a" : 0, "b" : 1, "c" : 17 }
{ "_id" : 4, "a" : 1, "b" : 0, "c" : 22 }
{ "_id" : 5, "a" : 1, "b" : 0, "c" : 5 }
{ "_id" : 6, "a" : 1, "b" : 1, "c" : 87 }
{ "_id" : 7, "a" : 1, "b" : 1, "c" : 97 }

And the following aggregation query

db.fun.aggregate([{$group:{_id:{a:"$a", b:"$b"}, c:{$max:"$c"}}}, {$group:{_id:"$_id.a", c:{$min:"$c"}}}])

What values are returned?

--Explanation--
Analizando o primeiro $group:

{$group : {_id: a: "$a", b : "$b"} --> para cada "a" e "b" que se repetem conjuntamente, criar um
novo documento.

Continuando...
{$group : {_id: a: "$a", b : "$b"}, c:{$max:"$c"}}} --> para cada um destes documentos, armazenar em
"c" o valor do maior "c" dos documentos.

Continuando...
{$group:{_id:"$_id.a"} --> para o resultado anterior, criar um novo documento para cada conjunto de "a"
de valor diferente.

Continuando...
{$group:{_id:"$_id.a", c:{$min:"$c"}}} ---> para cada um destes documentos , armazenar o menor valor de "c"
na variável "c".

Visão

a : 0, b: 0 => [2] -->  (21, 54) ==> (54) ===>
                                               (52)
a : 0, b: 1 => [2] -->  (52, 17) ==> (52) ===>

a : 1, b: 0 => [2] -->  (22, 5) ==> (22) ===>
                                               (22)
a :1 , b :1 => [2] -->  (87, 97) ==> (97) ===>

Resposta : 55,22
