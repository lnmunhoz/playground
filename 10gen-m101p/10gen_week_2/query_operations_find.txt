Criando uma coleção para testes:
No shell :

for(i=0;i<1000;i++){
    names=['exam','essay','quiz'];
    for(j=0;j<3;j++){db.scores.insert(
      {'student' : i, 
      'type' : names[j], 
      'score' : Math.round(Math.random()*100)});
      }
    }
  
--[Operações]--

Retornando apenas os documentos que:
-> a key 'student' se o type é 'essay' e score é 50:
    >> db.scores.find({'type' : 'essay', 'score' : 50} ,
                     {'student' : true, '_id' : false})                   
                    
                              
-> 'score' seja maior que 95:
    >> db.scores.find({'score' : { $gt : 95 } })

-> 'score' seja maior que 95, menor ou igual a 98 e o 'type' seja "essay":
    >> db.scores.find({'score' : { $gt : 95, $lte : 98 } , 'type' : 'essay'})

-> nome entre as letras "F e "Q: (Obs: a letra especificada precisa ser maiúscula.)
    >> db.users.find( { name : { $gte : "F" , $lte : "Q" } } )
    ou 
    >> db.users.find( { name : { $lte : "Q" , $gte : "F" } } )

-> possuem a key 'profession':
    >> db.people.find( { 'profession' : { $exists : true} } )

-> NÃO possuem a key 'profession':
    >> db.people.find( { 'profession' : { $exists : false} } )

-> a key 'name' seja do tipo string:
    >> db.people.find( { 'name' : { %type : 2 } } )

-> a key 'name' contenha a letra "a":
    >> db.people.find( { 'name' : { $regex : "a" } } )

-> a key 'name' termine com a letra "e":
    >> db.people.find( { 'name' : { $regex : "e$" } } )
    
-> a key 'name' que termine com a letra "e" e que possua a key 'age':
    >> db.people.find( { $or : [ { name : { $regex : "e$ } } , { age : { $exists : true } } ] } )
    
[--Importante--]
 >> db.scores.find ( { score: { $gt : 50 }, score : { $lt : 60 } } )
 A query acima na realidade não retorna o que é esperado, ou seja, os 'scores' maiores que 50
 e menores que 60. Nesse caso, irá retornar apenas os menores que 60, pois o javascript nao identifica
 uma dupla condição, já que não foi especificada. Então ele leva como parâmetro apenas a última operaçao,
 que sobrepõe a primeira.
  
-> a key 'friends' possua "Joe" e "Bob" e o array favorites contenha "running ou "pickles":
    >> db.users.find( { friends : { $all : [ "Joe" , "Bob" ] }, favorites : { $in : [ "running" , "pickles" ] } } )



